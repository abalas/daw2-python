conjunto1 = {"Ana", "Pedro", "Luis", "Eva"}
conjunto2 = set(["Ana", "Pedro", "Luis", "Eva"])
print(conjunto1)
print(conjunto2)
print(conjunto1[0])

if "Ana" in conjunto1:
    print("Ana est√°")
    print(conjunto1)
conjunto1.add("Manuel")
conjunto1.add("Manuel")
print(conjunto1.remove("Ana"))     # cuando queramos saber si existe o no exte el elemento a borrar
print(conjunto1)
conjunto1.discard("Eustaquio")  # no da error si no existe
print(conjunto1.pop())   # extrae al "azar" y elimina
print(conjunto1)
conjunto1.clear()
print(conjunto1)

# resumen_conjuntos.py
# ======================================================
# üß© CONJUNTOS (set) EN PYTHON
# ======================================================

# Un CONJUNTO (set) es una colecci√≥n DESORDENADA y SIN ELEMENTOS REPETIDOS.
# Se usa para almacenar elementos √∫nicos, y permite realizar operaciones
# matem√°ticas como uni√≥n, intersecci√≥n y diferencia.

# ------------------------------------------------------
# üü¢ CREACI√ìN DE CONJUNTOS
# ------------------------------------------------------

# Literalmente con llaves
conjunto1 = {"Ana", "Pedro", "Luis", "Eva"}

# A partir de una lista (con la funci√≥n set)
conjunto2 = set(["Pedro", "Ana", "Laura", "Luis"])

# Conjunto vac√≠o (IMPORTANTE: {} crea un diccionario, no un set)
conjunto_vacio = set()

# ------------------------------------------------------
# üîµ PROPIEDADES IMPORTANTES
# ------------------------------------------------------
# - No tienen orden ‚Üí el orden puede variar al imprimir.
# - No permiten duplicados.
# - Son mutables (puedes agregar o quitar elementos).
# - Sus elementos deben ser inmutables (n√∫meros, cadenas, tuplas...).

# ------------------------------------------------------
# üü£ OPERACIONES B√ÅSICAS
# ------------------------------------------------------

# Agregar elementos
conjunto1.add("Sof√≠a")

# Eliminar elementos
conjunto1.remove("Ana")      # Si no existe, lanza error
conjunto1.discard("Pepe")    # Si no existe, no lanza error

# Eliminar un elemento aleatorio
conjunto1.pop()

# Vaciar el conjunto
# conjunto1.clear()

print("Conjunto 1:", conjunto1)

# ------------------------------------------------------
# üü† OPERACIONES ENTRE CONJUNTOS
# ------------------------------------------------------

A = {1, 2, 3, 4}
B = {3, 4, 5, 6}

# Uni√≥n (elementos de ambos)
print("Uni√≥n:", A | B)
print("Uni√≥n (m√©todo):", A.union(B))

# Intersecci√≥n (elementos comunes)
print("Intersecci√≥n:", A & B)
print("Intersecci√≥n (m√©todo):", A.intersection(B))

# Diferencia (elementos que est√°n en A pero no en B)
print("Diferencia:", A - B)
print("Diferencia (m√©todo):", A.difference(B))

# Diferencia sim√©trica (elementos que est√°n en uno u otro, pero no en ambos)
print("Diferencia sim√©trica:", A ^ B)
print("Diferencia sim√©trica (m√©todo):", A.symmetric_difference(B))

# ------------------------------------------------------
# üü° M√âTODOS √öTILES
# ------------------------------------------------------
C = {10, 20, 30}
D = {20, 30}

print("¬øD est√° contenido en C?", D.issubset(C))         # Subconjunto
print("¬øC contiene a D?", C.issuperset(D))              # Superconjunto
print("¬øC y A son disjuntos?", C.isdisjoint(A))         # Sin elementos comunes

# ------------------------------------------------------
# üî¥ DIFERENCIAS CON LISTAS
# ------------------------------------------------------
# - Los conjuntos no tienen orden ‚Üí no se puede acceder por √≠ndice (ej: conjunto[0] ‚ùå)
# - No permiten elementos repetidos.
# - Son m√°s r√°pidos para b√∫squedas ("in").

print("¬ø3 est√° en A?", 3 in A)   # True

# ------------------------------------------------------
# üß† RESUMEN FINAL
# ------------------------------------------------------
# ‚úîÔ∏è set() ‚Üí colecci√≥n sin duplicados
# ‚úîÔ∏è No tiene orden
# ‚úîÔ∏è Ideal para comparar y eliminar duplicados
# ‚úîÔ∏è Soporta operaciones de teor√≠a de conjuntos
